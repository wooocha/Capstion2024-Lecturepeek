ÏÜåÏöîÏãúÍ∞Ñ : 69.52062964439392 
ÏòÅÏÉÅÎßÅÌÅ¨ : https://www.youtube.com/watch?v=HtSuA80QTyo&t=1105s
Ï∂îÏ∂úÎ∞©Ïãù : 1
{
  "videoTitle": "Peak Finding Lecture",
  "videoDescription": "Lecture on peak finding algorithms in 1D and 2D arrays",
  "Lecture Note": [
    {
      "timestamp": "00:00:00",
      "section_title": "üìö Introduction",
      "content": "The lecture introduces the concept of peak finding algorithms in 1D and 2D arrays."
    },
    {
      "timestamp": "00:25:03",
      "section_title": "üîç Divide and Conquer Strategy",
      "content": "The lecturer explains the divide and conquer strategy for peak finding in 1D arrays. The array is recursively divided into smaller arrays to reduce complexity."
    },
    {
      "timestamp": "00:25:30",
      "section_title": "üîç Multiple Peaks",
      "content": "The lecturer clarifies that the algorithm is designed to find any peak, not just a single peak."
    },
    {
      "timestamp": "00:27:20",
      "section_title": "üìö Greedy Ascent Algorithm",
      "content": "The lecturer introduces the Greedy Ascent algorithm for peak finding in 2D arrays. The algorithm picks a direction and follows it to find a peak."
    },
    {
      "timestamp": "00:31:44",
      "section_title": "üìà Complexity of Algorithms",
      "content": "The lecturer discusses the complexity of the peak finding algorithms. The divide and conquer algorithm has a complexity of theta(log n) in 1D arrays and theta(n log m) in 2D arrays."
    },
    {
      "timestamp": "00:52:08",
      "section_title": "üîç Recursive Version for 2D Arrays",
      "content": "The lecturer presents a recursive version of the algorithm for peak finding in 2D arrays. The algorithm compares elements in the middle column and recursively divides the array."
    },
    {
      "timestamp": "00:52:43",
      "section_title": "üìö Conclusion",
      "content": "The lecturer concludes the lecture by mentioning that there are four algorithms to analyze and encourages students to ask questions."
    }
  ],
  "questions": [
    {
      "question": "What is the complexity of the divide and conquer algorithm in 1D arrays?",
      "answer": "The complexity is theta(log n)."
    },
    {
      "question": "What is the complexity of the Greedy Ascent algorithm in 2D arrays?",
      "answer": "The complexity depends on the worst case scenario, but it can be theta(nm)."
    },
    {
      "question": "What is the complexity of the recursive version for peak finding in 2D arrays?",
      "answer": "The complexity is theta(n + n log m)."
    }
  ],
  "script": [
    {
      "timestamp": "0:25:05",
      "content": "--then you can eliminate\nthe left half."
    },
    {
      "timestamp": "0:25:03",
      "content": "On the right side, then you would just look at that, because you know that your peak's somewhere in there."
    },
    {
      "timestamp": "0:25:06",
      "content": "And you continue cutting in half."
    },
    {
      "timestamp": "0:25:08",
      "content": "PROFESSOR: Excellent!"
    },
    {
      "timestamp": "0:25:09",
      "content": "Excellent!"
    },
    {
      "timestamp": "0:25:09",
      "content": "That's exactly right."
    },
    {
      "timestamp": "0:25:11",
      "content": "So you can-- You can do something different, which is essentially try and break up this problem."
    },
    {
      "timestamp": "0:25:14",
      "content": "Use a divide and conquer strategy, and recursively break up this one dimensional array into smaller arrays."
    },
    {
      "timestamp": "0:25:22",
      "content": "And try and get this complexity down."
    },
    {
      "timestamp": "0:25:29",
      "content": "Yeah?"
    },
    {
      "timestamp": "0:25:30",
      "content": "AUDIENCE: Are we assuming that there's only one peak?"
    },
    {
      "timestamp": "0:25:33",
      "content": "PROFESSOR: No, we're not."
    },
    {
      "timestamp": "0:25:34",
      "content": "AUDIENCE: OK."
    },
    {
      "timestamp": "0:25:34",
      "content": "PROFESSOR: It's find a peak if it exists."
    },
    {
      "timestamp": "0:25:39",
      "content": "And in this case it's, \"find a peak\", because of the definition."
    },
    {
      "timestamp": "0:25:42",
      "content": "We don't really need this as it was discussed."
    },
    {
      "timestamp": "0:25:45",
      "content": "All right?"
    },
    {
      "timestamp": "0:25:46",
      "content": "OK."
    },
    {
      "timestamp": "0:25:47",
      "content": "So--"
    },
    {
      "timestamp": "0:25:49",
      "content": "So that was a great answer, and-- You know this class after while is going to get boring."
    },
    {
      "timestamp": "0:25:54",
      "content": "Right?"
    },
    {
      "timestamp": "0:25:55",
      "content": "Every class gets boring."
    },
    {
      "timestamp": "0:25:57",
      "content": "So we, you know, try and break the monotony here a bit."
    },
    {
      "timestamp": "0:26:00",
      "content": "And so-- And then the other thing that we realized was that these seats you're sitting on-- this is a nice classroom-- but the seats you're sitting on are kind of hard."
    },
    {
      "timestamp": "0:26:06",
      "content": "Right?"
    },
    {
      "timestamp": "0:26:07",
      "content": "So what Eric and I did was we decided we'll help you guys out, especially the ones who are-- who are interacting with us."
    },
    {
      "timestamp": "0:26:15",
      "content": "And we have these-- [LAUGHTER] --cushions that are 6.006 cushions."
    },
    {
      "timestamp": "0:26:22",
      "content": "And, you know, that's a 2 by 2 by 2 Rubik's cube here."
    },
    {
      "timestamp": "0:26:25",
      "content": "And since you answered the first question, you get a cushion."
    },
    {
      "timestamp": "0:26:28",
      "content": "This is kind of like a Frisbee, but not really."
    },
    {
      "timestamp": "0:26:31",
      "content": "So-- [LAUGHTER] I'm not sure-- I'm not sure I'm going to get it to you."
    },
    {
      "timestamp": "0:26:35",
      "content": "But the other thing I want to say is this is not a baseball game."
    },
    {
      "timestamp": "0:26:37",
      "content": "Right?"
    },
    {
      "timestamp": "0:26:38",
      "content": "Where you just grab the ball as it comes by."
    },
    {
      "timestamp": "0:26:40",
      "content": "This is meant for him, my friend in the red shirt."
    },
    {
      "timestamp": "0:26:43",
      "content": "So here you go."
    },
    {
      "timestamp": "0:26:45",
      "content": "Ah, too bad."
    },
    {
      "timestamp": "0:26:46",
      "content": "All right."
    },
    {
      "timestamp": "0:26:47",
      "content": "It is soft."
    },
    {
      "timestamp": "0:26:48",
      "content": "So, you know, it won't-- it won't hurt you if hits you."
    },
    {
      "timestamp": "0:26:51",
      "content": "[LAUGHTER] All right."
    },
    {
      "timestamp": "0:26:52",
      "content": "So we got a bunch of these."
    },
    {
      "timestamp": "0:26:54",
      "content": "And raise your hands, you know, going to ask-- There's going to be-- I think-- There's some trivial questions that we're going to ask just to make sure you're awake."
    },
    {
      "timestamp": "0:27:03",
      "content": "So an answer to that doesn't get you a cushion."
    },
    {
      "timestamp": "0:27:07",
      "content": "But an answer like-- What's your name?"
    },
    {
      "timestamp": "0:27:10",
      "content": "AUDIENCE: Chase."
    },
    {
      "timestamp": "0:27:11",
      "content": "PROFESSOR: Chase."
    },
    {
      "timestamp": "0:27:11",
      "content": "An answer like Chase just gave is-- that's a good answer to a nontrivial question."
    },
    {
      "timestamp": "0:27:18",
      "content": "OK?"
    },
    {
      "timestamp": "0:27:19",
      "content": "All right, great."
    },
    {
      "timestamp": "0:27:20",
      "content": "So let's put up by Chase's algorithm up here."
    },
    {
      "timestamp": "0:27:24",
      "content": "I'm going to write it out for the 1D version."
    },
    {
      "timestamp": "0:27:41",
      "content": "So what we have here is a recursive algorithm."
    },
    {
      "timestamp": "0:28:02",
      "content": "So the picture you want to keep in your head is this picture that I put up there."
    },
    {
      "timestamp": "0:28:04",
      "content": "And this is a divide and conquer algorithm."
    },
    {
      "timestamp": "0:28:11",
      "content": "You're going to see this over and over-- this paradigm-- over and over in 6.006."
    },
    {
      "timestamp": "0:28:14",
      "content": "We're going to look at the n over 2 position."
    },
    {
      "timestamp": "0:28:25",
      "content": "And we're going to look to the left, and we're going to look to the right."
    },
    {
      "timestamp": "0:28:31",
      "content": "And we're going to do that in sequence."
    },
    {
      "timestamp": "0:28:33",
      "content": "So-- --if a n over 2 is less than a n over 2 minus 1, then-- --only look at the left half."
    },
    {
      "timestamp": "0:28:50",
      "content": "1 through n over 2 minus 1 to look for peak-- for a peak."
    },
    {
      "timestamp": "0:29:08",
      "content": "All right? That's step one."
    },
    {
      "timestamp": "0:29:10",
      "content": "And you know I could put it on the right hand side or the left hand side, doesn't really matter."
    },
    {
      "timestamp": "0:29:15",
      "content": "I chose to do the left hand side first, the left half."
    },
    {
      "timestamp": "0:29:20",
      "content": "And so what I've done is, through that one step, if in fact you have that condition-- a n over 2 is less than a n over 2 minus 1-- then you move to your left and you work on one half of the problem."
    },
    {
      "timestamp": "0:29:37",
      "content": "But if that's not the case, then if n over-- n over 2 is less than a over n over-- n by 2 plus 1, then only look at n over 2 plus 1 through n for a peak."
    },
    {
      "timestamp": "0:29:57",
      "content": "So I haven't bothered writing out all the words. They're exactly the same as the left hand side. You just look to the right hand side."
    },
    {
      "timestamp": "0:30:03",
      "content": "Otherwise if both of these conditions don't fire, you're actually done."
    },
    {
      "timestamp": "0:30:12",
      "content": "OK? That's actually the best case in terms of finishing early, at least in this recursive step. Because now the n over 2 position is a peak."
    },
    {
      "timestamp": "0:30:27",
      "content": "Because what you found is that the n over 2 position is greater than or equal to both of its adjacent positions, and that's exactly the definition of a peak. So you're done."
    },
    {
      "timestamp": "0:30:38",
      "content": "OK? All of this is good."
    },
    {
      "timestamp": "0:30:44",
      "content": "You want to write an argument that this algorithm is correct."
    },
    {
      "timestamp": "0:30:53",
      "content": "And I'm not going to bother with that. I just wave my hands a bit, and you all nodded, so we're done with that. But the point being you will see in your problem set a precise argument for a more complicated algorithm, the 2D version of this. And that should be a template for you to go write a proof, or an argument, a formal argument, that a particular algorithm is correct. That it does what it claims to do. And in this case it's two, three lines of careful reasoning that essentially say, given the definition of the peak, that this is going to find a peak in the array that you're given. All right? We all believe that this algorithm is correct."
    },
    {
      "timestamp": "0:31:44",
      "content": "Let's talk now about the complexity of this algorithm. Because the whole point of this algorithm was because we didn't like this theta n complexity corresponding to the straightforward algorithm. So it'd like to do better."
    },
    {
      "timestamp": "0:32:08",
      "content": "So what I'd like to do is ask one of you to give me a recurrence relation of the kind, you know, T of n equals blah, blah, blah. That would correspond to this recursive algorithm, this divide and conquer algorithm. And then using that, I'd like to get to the actual complexity in terms of what the theta of complexity corresponds to."
    },
    {
      "timestamp": "0:32:33",
      "content": "AUDIENCE: So the worst case scenario if T of n is going to be some constant amount of time-- PROFESSOR: Yep. AUDIENCE: --it takes to investigate whether a certain element is [INAUDIBLE], plus-- [COUGH] --T of n over 2? PROFESSOR: Great. Exactly right. That's exactly right. If you look at this algorithm and you say, from a computation standpoint, can I write an equation corresponding to the execution of this algorithm? And you say, T of n is the work that this algorithm does on-- as input of size n. OK? Then I can write this equation. And this theta 1 corresponds to the two comparisons that you do looking at-- potentially the two comparisons that you do-- looking at the left hand side and the right hand side. So that's-- 2 is a constant, so that's why we put theta 1. All right? So you get a cushion, too. Watch out guys. Whoa! Oh actually that wasn't so bad. Good. Veers left, Eric. Veers left. So if you take this and you start expanding it, eventually you're going to get to the base case, which is T of 1 is theta 1. Right? Because you have a one element array you just for that array it's just going to return that as a peak. And so if you do that, and you expand it all the way out, then you can write T of n equals theta 1 plus theta 1. And you're going to do this log to the base 2 of n times. And adding these all up, gives you a complexity theta log 2 of n. Right? So now you compare this with that. And there's really a huge difference. There's an exponential difference. If you coded up this algorithm in Python-- and I did-- both these algorithms for the 1D version-- and if you run it on n being 10 million or so, then this algorithm takes 13 seconds. OK? The-- The theta 10 algorithm takes 13 seconds. And this one takes 0.001 seconds. OK? Huge difference. So there is a big difference between theta n and theta log n. It makes sense to try and reduce complexity as you can see, especially if you're talking about large inputs. And you'll see that more clearly as we go to a 2D version of this problem. All right? You can't really do better for the 1D. The 1D is a straightforward problem. It gets a little more interesting-- the problems get a little-- excuse me, the algorithms get a little more sophisticated when we look at a 2D version of peak finding. So let's talk about the 2D version."
    },
    {
      "timestamp": "0:36:15",
      "content": "So as you can imagine in the 2D version you have a matrix, or a two dimensional array. And we'll say this thing has n rows and m columns."
    },
    {
      "timestamp": "0:36:34",
      "content": "And now we have to define what a peak is. And it's a hill. It's the obvious definition of a peak. So if you had a in here, c, b, d, e. Then as you can guess, a is a 2D peak if, and only if, a greater than or equal to b; a greater than or equal to d, c and e."
    },
    {
      "timestamp": "0:37:23",
      "content": "Now again I'll give you the straightforward algorithm, and we'll call it the Greedy Ascent algorithm. And the Greedy Ascent algorithm essentially picks a direction and, you know, tries to follow that direction in order to find a peak."
    },
    {
      "timestamp": "0:38:58",
      "content": "So in this case you'll go to 12, 13 , 14, 15, 16, 17, 19, and 20. And you'd find-- You'd find this peak."
    },
    {
      "timestamp": "0:39:17",
      "content": "Now I haven't given you the specific details of a Greedy Ascent algorithm. But I think if you look at the worst case possibilities here, with respect to a given matrix, and for any given starting point, and for any given strategy-- in terms of choosing left first, versus right first, or down first versus up first-- you will have a situation where-- just like we had in the 1D case-- you may end up touching a large fraction of the elements in this 2D array."
    },
    {
      "timestamp": "0:40:33",
      "content": "AUDIENCE: Can you-- Is that an approximation? Or can you actually get to n times m traversals? PROFESSOR: So there are specific Greedy Ascent algorithms, and specific matrices where, if I give you the code for the algorithm, and I give you a specific matrix, that I could make you touch all of these elements. That's correct. So we're talking about worst case. You're being very paranoid when you talk about worst case complexity. And so I'm-- hand waving a bit here, simply because I haven't given you the specifics of the algorithm yet. Right? This is really a set of algorithms, because I haven't given you the code, I haven't told you where it starts, and which direction it goes. But you go, do that, fix it, and I would be the person who tries to find the worst case complexity. Suddenly it's very easy to get to theta n m in terms of having some constant multiplying n times m. But you can definitely get to that constant being very close to 1. If not 1."
    },
    {
      "timestamp": "0:42:18",
      "content": "So let's talk about divide and conquer. And let's say that I did something like this, where I just tried to jam the binary search algorithm into the 2D version."
    },
    {
      "timestamp": "0:43:50",
      "content": "So what I'm going to do is pick a middle column, j equals m over 2. I'm going to find a 1D peak using whatever algorithm I want. And I'll probably end up using the more efficient algorithm, the binary search version that's gone all the way to the left of the board there. So this is j equals m over 2. That's i. Now I use (i,j). In particular row i as a start-- to find a 1D peak on row i."
    },
    {
      "timestamp": "0:44:26",
      "content": "In this case row i would be m wide, so it would be log m complexity. If n equals m, then I have a couple of steps of log n, and I'm done."
    },
    {
      "timestamp": "0:44:59",
      "content": "So not so good. Looks like an efficient algorithm, but doesn't work."
    },
    {
      "timestamp": "0:47:09",
      "content": "So the last algorithm that I'm going to show you-- And you'll see four different algorithms in your problem set-- that you'll have to analyze the complexity for and decide if they're efficient, and if they're correct. But here's a-- a recursive version that is better than, in terms of complexity, than the Greedy Ascent algorithm. And this one works."
    },
    {
      "timestamp": "0:47:43",
      "content": "So what I'm going to do is pick a middle column. j equals m over 2 as before. I'm going to find the global maximum on column j. And that's going to be at (i, j). I'm going to compare (i comma j minus 1), (i comma j), and (i,j plus 1). Which means that once I've found the maximum in this row, all I'm going to look to the left and the right, and compare. I'm going to pick the left columns. If (i comma j minus 1) is greater than (i comma j)-- and similarly for the right. And if in fact I-- either of these two conditions don't fire, and what I have is (i comma j) is greater than or equal to (i comma j minus 1) and (i comma j plus 1), then I'm done. Just like I had for the 1D version. If (i comma j) is greater than or equal to (i comma j minus 1), and (i comma j plus 1), that implies (i, j) is a 2D peak. OK? And the reason that is the case, is because (i comma j) was the maximum element in that column. So you know that you've compared it to all of the adjacent elements, looking up and looking down, that's the maximum element. Now you've look at the left and the right, and in fact it's greater than or equal to the elements on the left and the right. And so therefore it's a 2D peak."
    },
    {
      "timestamp": "0:50:41",
      "content": "The peak algorithm is similar to the 1D version."
    },
    {
      "timestamp": "0:50:43",
      "content": "The matrix is divided into half the size."
    },
    {
      "timestamp": "0:50:46",
      "content": "This is why the algorithm works."
    },
    {
      "timestamp": "0:50:51",
      "content": "When there is a single column, find the global maximum and finish."
    },
    {
      "timestamp": "0:51:09",
      "content": "This is the base case."
    },
    {
      "timestamp": "0:51:10",
      "content": "Now let me write out the recurrence relation for the complexity of this algorithm."
    },
    {
      "timestamp": "0:51:14",
      "content": "The overall complexity of this algorithm will be discussed."
    },
    {
      "timestamp": "0:51:22",
      "content": "And now for the bad news."
    },
    {
      "timestamp": "0:51:31",
      "content": "The overall complexity can be represented as T of (n, m) equals T of (n, m over 2) plus theta n."
    },
    {
      "timestamp": "0:51:42",
      "content": "This is because n represents the number of rows and m represents the number of columns."
    },
    {
      "timestamp": "0:51:47",
      "content": "In one case, the number of columns is halved to m over 2."
    },
    {
      "timestamp": "0:51:54",
      "content": "To find the global maximum, theta n work is required."
    },
    {
      "timestamp": "0:52:01",
      "content": "You just have to scan it."
    },
    {
      "timestamp": "0:52:08",
      "content": "If you run it through and know that T of (n, 1) is theta n, the base case, you get T of (n, m) is theta n plus theta n log 2 of m."
    },
    {
      "timestamp": "0:52:43",
      "content": "So you're not done with peak finding."
    },
    {
      "timestamp": "0:52:48",
      "content": "There are four algorithms coded in Python that you'll have to recognize."
    },
    {
      "timestamp": "0:52:57",
      "content": "You will have seen versions of those algorithms already in lecture."
    },
    {
      "timestamp": "0:53:01",
      "content": "Your job is to analyze the algorithms, prove one of them is correct, and find counter-examples for the ones that aren't correct."
    },
    {
      "timestamp": "0:53:12",
      "content": "The course staff will be available to answer questions and I owe someone a cushion."
    }
  ]
}